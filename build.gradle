plugins {
    id 'fabric-loom' version '0.2.4-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "vivatech"
version = "1.0.0-alpha.10+1.14.4"

repositories {
    jcenter()
    maven {
        name = "Fabric"
        url = "http://maven.fabricmc.net"
    }
    maven {
        name = "Cotton (Snapshot)"
        url = "http://server.bbkr.space:8081/artifactory/libs-snapshot"
    }
    maven {
        name = "Cotton"
        url "http://server.bbkr.space:8081/artifactory/libs-release"
    }
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        name = "BuildCraft"
        url = "https://minecraft.curseforge.com/api/maven"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:1.14.4"
    mappings "net.fabricmc:yarn:1.14.4+build.2"
    modImplementation "net.fabricmc:fabric-loader:0.4.8+build.157"
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.3.0+build.200"

    // javax.annotations.*
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    modApi "alexiil.mc.lib:libblockattributes-all:0.4.9"
    modApi "io.github.cottonmc:LibGui:1.1.0"
    modApi "io.github.cottonmc:Jankson:1.0.0-j1.1.2"
    modApi "io.github.cottonmc:cotton-energy:1.5.0+1.14.3-SNAPSHOT"
    modApi "io.github.cottonmc:cotton-resources:1.3.3+1.14.3"

    include "alexiil.mc.lib:libblockattributes-all:0.4.9"
    include "io.github.cottonmc:LibGui:1.1.0"
    include "io.github.cottonmc:Jankson:1.0.0-j1.1.2"
    include "io.github.cottonmc:cotton-energy:1.5.0+1.14.3-SNAPSHOT"
    include "io.github.cottonmc:cotton-resources:1.3.3+1.14.3"

    // Integration tests
    modImplementation ("me.shedaniel:RoughlyEnoughItems:2.9.7+build.140") { transitive = false }
//    modImplementation ("io.github.prospector:modmenu:1.6.3+build.101") { transitive = false }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}
